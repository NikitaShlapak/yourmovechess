# Generated by Django 4.1 on 2022-08-28 19:47

import competition.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким адресом электронной почты уже зарегистрирован'}, max_length=254, unique=True, verbose_name='Почта')),
                ('b_date', models.DateField(verbose_name='Дата рождения')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=20, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Отчество')),
                ('region', models.TextField(choices=[('ЦФО', 'Центральный федеральный округ'), ('СЗФО', 'Северо - Западный федеральный округ'), ('ЮФО', 'Южный федеральный округ'), ('СКФО', 'Северо - Кавказский федеральный округ'), ('ПФО', 'Приволжский федеральный округ'), ('УФО', 'Уральский федеральный округ'), ('СФО', 'Сибирский федеральный округ'), ('ДФО', 'Дальневосточный федеральный округ')], verbose_name='Федеральный округ')),
                ('phoneNumber', models.CharField(error_messages={'unique': 'Пользователь с таким номером телефона уже зарегистрирован'}, max_length=16, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{8,15}$')], verbose_name='Номер телефона')),
                ('rf_id', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.RegexValidator(regex='^\\d{,10}$')], verbose_name='ФШР id')),
                ('rf_fide', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(regex='^\\d{,10}$')], verbose_name='FIDE id')),
                ('rating_standart_ru', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг ФШР (класиика)')),
                ('rating_rapid_ru', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг ФШР (рапид)')),
                ('rating_blitz_ru', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг ФШР (блиц)')),
                ('rating_standart', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг FIDE (класиика)')),
                ('rating_rapid', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг FIDE (рапид)')),
                ('rating_blitz', models.CharField(default=1000, max_length=4, validators=[django.core.validators.RegexValidator(regex='^\\d{,4}$')], verbose_name='Рейтинг FIDE (блиц)')),
                ('city', models.CharField(max_length=30, verbose_name='Город, область')),
                ('SSK', models.CharField(max_length=30, verbose_name='Название ССК')),
                ('university', models.TextField(verbose_name='Название учебного заведения')),
                ('lichess_nick', models.CharField(max_length=20, verbose_name='Ник на lichess.org')),
                ('state', models.TextField(choices=[('Rejected', 'Заявка отклонена'), ('Unconfirmed', 'Проверка не окончена'), ('Confirmed', 'Участник допущен к отборочному этапу'), ('Semi-finalist', 'Участник прошёл первый отборочный этап'), ('Finalist', 'Участник прошёл в заочный финал'), ('Superfinalist', 'Участник приглашён на очный суперфинал')], default='Unconfirmed', verbose_name='Статус участника')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Участник дисквалифицирован')),
                ('reason', models.TextField(blank=True, default='', null=True, verbose_name='Причина дисквалификации или отклонения заявки')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', competition.models.UserManager()),
            ],
        ),
    ]
